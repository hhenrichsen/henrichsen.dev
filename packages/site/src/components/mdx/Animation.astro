---
const { src, caption, variables, auto = true, ...props } = Astro.props;
---

<figure>
  <motion-canvas-player
    src={src}
    variables={JSON.stringify(variables)}
    auto={auto}
    {...props}></motion-canvas-player>
  {caption && <figcaption>{caption}</figcaption>}
</figure>

<style>
  motion-canvas-player {
    width: 100%;
  }

  figure {
    background-color: var(--mantle);
    margin: 1em 0;
    border-radius: 1em;
    padding: 1em;
  }

  figcaption {
    text-align: center;
    font-size: 0.8em;
    margin-top: 0.5em;
    font-style: italic;
  }
</style>

<script>
  import "@motion-canvas/player";
  import "@motion-canvas/core";

  const listenedColors = [
    "--text",
    "--subtext",
    "--surface",
    "--crust",
    "--mantle",
    "--red",
    "--peach",
    "--yellow",
    "--green",
    "--blue",
    "--sky",
  ];

  function updateVariables(values: Record<string, string>) {
    const motionCanvasPlayers =
      document.querySelectorAll(`motion-canvas-player`);
    motionCanvasPlayers.forEach((motionCanvasPlayer) => {
      const oldVariables = JSON.parse(
        motionCanvasPlayer.getAttribute("variables") || "{}"
      );
      const newVariables = { ...oldVariables, ...values };
      motionCanvasPlayer.setAttribute(
        "variables",
        JSON.stringify(newVariables)
      );
    });
  }

  function readColors(element: HTMLElement) {
    const colors: Record<string, string> = {};
    listenedColors.forEach((color) => {
      colors[color] = window.getComputedStyle(element).getPropertyValue(color);
    });
    return colors;
  }

  // Listen to updates to the CSS variables on the root element
  const styleObserver = new MutationObserver((mutations) => {
    if (!(mutations[0].target instanceof HTMLElement)) {
      return;
    }
    if (
      mutations[0].type !== "attributes" ||
      mutations[0].attributeName !== "class"
    ) {
      return;
    }
    const newValues = readColors(mutations[0].target as HTMLElement);
    updateVariables(newValues);
  });

  styleObserver.observe(document.documentElement, {
    attributes: true,
    attributeFilter: ["class"],
  });

  updateVariables(readColors(document.documentElement));
</script>

<script is:inline data-astro-rerun>
  document.addEventListener("astro:after-swap", (e) => {
    if (document.querySelector("motion-canvas-player")) {
      window.location.reload();
    }
  });
</script>
